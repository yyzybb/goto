// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

package airth

import proto "encoding/protobuf/proto"
import json "encoding/json"
import math "math"

import "goto_rpc"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type ArithRequest struct {
	A                *int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B                *int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArithRequest) Reset()         { *m = ArithRequest{} }
func (m *ArithRequest) String() string { return proto.CompactTextString(m) }
func (*ArithRequest) ProtoMessage()    {}

func (m *ArithRequest) GetA() int32 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

func (m *ArithRequest) GetB() int32 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

type ArithResponse struct {
	Val              *int32 `protobuf:"varint,1,opt,name=val" json:"val,omitempty"`
	Quo              *int32 `protobuf:"varint,2,opt,name=quo" json:"quo,omitempty"`
	Rem              *int32 `protobuf:"varint,3,opt,name=rem" json:"rem,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ArithResponse) Reset()         { *m = ArithResponse{} }
func (m *ArithResponse) String() string { return proto.CompactTextString(m) }
func (*ArithResponse) ProtoMessage()    {}

func (m *ArithResponse) GetVal() int32 {
	if m != nil && m.Val != nil {
		return *m.Val
	}
	return 0
}

func (m *ArithResponse) GetQuo() int32 {
	if m != nil && m.Quo != nil {
		return *m.Quo
	}
	return 0
}

func (m *ArithResponse) GetRem() int32 {
	if m != nil && m.Rem != nil {
		return *m.Rem
	}
	return 0
}

func init() {
}

type IArithServiceAsyn interface {
	Multiply(ctx goto_rpc.IContext, request *ArithRequest)
	Divide(ctx goto_rpc.IContext, request *ArithRequest)
}
type IArithServiceSync interface {
	Multiply(ctx goto_rpc.IContext, request *ArithRequest) (response *ArithResponse, status byte)
	Divide(ctx goto_rpc.IContext, request *ArithRequest) (response *ArithResponse, status byte)
}

func RegisterArithServiceAsyn(srv *goto_rpc.Server, service IArithServiceAsyn) (e error) {
	e = srv.AddServiceFunc("ArithService.Multiply", func(ctx goto_rpc.IContext, request proto.Message) {
		service.Multiply(ctx, request.(*ArithRequest))
	}, func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return e
	}

	e = srv.AddServiceFunc("ArithService.Divide", func(ctx goto_rpc.IContext, request proto.Message) {
		service.Divide(ctx, request.(*ArithRequest))
	}, func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return e
	}

	return nil
}
func RegisterArithServiceSync(srv *goto_rpc.Server, service IArithServiceSync) (e error) {
	e = srv.AddServiceFunc("ArithService.Multiply", func(ctx goto_rpc.IContext, request proto.Message) {
		rsp, s := service.Multiply(ctx, request.(*ArithRequest))
		ctx.Reply(s, rsp)
	}, func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return e
	}

	e = srv.AddServiceFunc("ArithService.Divide", func(ctx goto_rpc.IContext, request proto.Message) {
		rsp, s := service.Divide(ctx, request.(*ArithRequest))
		ctx.Reply(s, rsp)
	}, func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return e
	}

	return nil
}

type ArithService_Stub struct {
	*goto_rpc.Client
}

func NewArithService_Stub(c *goto_rpc.Client) (stub *ArithService_Stub, e error) {
	e = c.AddServiceInfo("ArithService.Multiply", func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return
	}

	e = c.AddServiceInfo("ArithService.Divide", func() proto.Message {
		return &ArithRequest{}
	}, func() proto.Message {
		return &ArithResponse{}
	})
	if e != nil {
		return
	}

	stub = &ArithService_Stub{c}
	return
}
func (stub *ArithService_Stub) Multiply(request *ArithRequest) (*ArithResponse, error) {
	rsp, e := stub.Call("ArithService.Multiply", request)
	response, _ := rsp.(*ArithResponse)
	return response, e
}
func (stub *ArithService_Stub) Divide(request *ArithRequest) (*ArithResponse, error) {
	rsp, e := stub.Call("ArithService.Divide", request)
	response, _ := rsp.(*ArithResponse)
	return response, e
}
func (stub *ArithService_Stub) AsynMultiply(request *ArithRequest, cb func(error, *ArithResponse)) {
	stub.AsynCall("ArithService.Multiply", request, func(err error, rsp proto.Message) {
		response, _ := rsp.(*ArithResponse)
		cb(err, response)
	})
}
func (stub *ArithService_Stub) AsynDivide(request *ArithRequest, cb func(error, *ArithResponse)) {
	stub.AsynCall("ArithService.Divide", request, func(err error, rsp proto.Message) {
		response, _ := rsp.(*ArithResponse)
		cb(err, response)
	})
}
